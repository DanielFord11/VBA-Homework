Attribute VB_Name = "Module1"
Sub Stocks()

Dim SavedStocks() As String
Dim ColumnSize As Long
Dim BonusColumn As Long
Dim TablePlace As Integer
Dim GreatestIncrease As Double
Dim GreatestDecrease As Double
Dim GreatestVolume As Double
Dim AmIncrease As Double
Dim TickersArray() As String
Dim ColorIndex As Integer


                                        'Counter for place on output table and color index
TablePlace = 2
ColorIndex = 3

Application.ScreenUpdating = False

                                        'Measures the row count to set the array size and iteration count
ColumnSize = Cells(Rows.Count, "A").End(xlUp).Row
ReDim TickersArray(ColumnSize)
ReDim SavedStocks(7)

                                        'Creates an Array to hold all the Ticker Symbols for each entry
For Tickers = 0 To ColumnSize
    TickersArray(Tickers) = Cells(Tickers + 1, 1).Value
Next Tickers

'------Main loop to extract open/close values and calulate total volume/change per stock
For i = 1 To ColumnSize
                                        'Compares ticker sybols within the array to determine if it's an opening stock
   If TickersArray(i - 1) <> TickersArray(i) Then
                                        'Adds opening day volume to table
        Cells(TablePlace, 12) = Cells(TablePlace, 12) + Cells(i + 1, 7).Value
                                        'Adds opening stock values to array for later reference
        For j = 0 To 6
            SavedStocks(j) = Cells(i + 1, j + 1).Value
        Next j
        
                                        'Compares ticker symbols within the array to determine if it's a closing stock
    ElseIf TickersArray(i) <> TickersArray(i + 1) Or i = ColumnSize Then
    
                                        'Handles divide by zero error for stocks that open as zero (sets to 1)
            On Error GoTo ZeroHandle
            If Cells(i + 1, 6).Value - SavedStocks(2) > 0 Then
                    ColorIndex = 4
            End If
            
                                        'Calculates/enters change/volume stats to table and clears the opening stock array
            Cells(TablePlace, 9) = SavedStocks(0)
            Cells(TablePlace, 10) = Cells(i + 1, 6).Value - SavedStocks(2)
            Cells(TablePlace, 10).Interior.ColorIndex = ColorIndex
            Cells(TablePlace, 11) = Round((Cells(i + 1, 6).Value - SavedStocks(2)) / SavedStocks(2), 2)
            Cells(TablePlace, 11).Interior.ColorIndex = ColorIndex
            Cells(TablePlace, 12) = Cells(TablePlace, 12) + Cells(i + 1, 7).Value
            TablePlace = TablePlace + 1
            ReDim SavedStocks(7)
            ColorIndex = 3

    Else
                                         'Increments the total volume for the non-opening/closing stocks
        Cells(TablePlace, 12) = Cells(TablePlace, 12) + Cells(i + 1, 7).Value
    End If
Next i

'-------Bonus: Greatest Increase, Decrease, and Volume

BonusColumn = Cells(Rows.Count, "I").End(xlUp).Row

'Increase
For i = 2 To BonusColumn
    If GreatestIncrease < Cells(i, 11).Value Then
        GreatestIncrease = Cells(i, 11).Value
        Range("N3").Value = Cells(i, 9)
        Range("O3") = GreatestIncrease
    End If
Next i

'Decrease
For i = 2 To BonusColumn
    If Cells(i, 11).Value < GreatestDecrease Then
        GreatestDecrease = Cells(i, 11).Value
        Range("N4").Value = Cells(i, 9)
        Range("O4") = GreatestDecrease
    End If
Next i

'Greatest Volume
For i = 2 To BonusColumn
    If GreatestVolume < Cells(i, 12).Value Then
        GreatestVolume = Cells(i, 12).Value
        Range("N5").Value = Cells(i, 9)
        Range("O5") = GreatestVolume
    End If
Next i

Application.ScreenUpdating = True

Exit Sub

ZeroHandle:
            SavedStocks(2) = 1
            Resume

End Sub

